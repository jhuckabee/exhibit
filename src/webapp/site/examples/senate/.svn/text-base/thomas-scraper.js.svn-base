var rdf = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';var rdfs = 'http://www.w3.org/2000/01/rdf-schema#';var dc = 'http://purl.org/dc/elements/1.1/';var sns = 'http://simile.mit.edu/2007/05/senate-ns#';var sd = 'http://simile.mit.edu/2007/05/senate#';var namespace = document.documentElement.namespaceURI;var nsResolver = namespace ? function(prefix) {  return (prefix == 'x') ? namespace : null;} : null;var getNode = function(document, contextNode, xpath, nsResolver) {  return document.evaluate(xpath, contextNode, nsResolver, XPathResult.ANY_TYPE,null).iterateNext();}var cleanString = function(s) {  return utilities.trimString(s);}var failure = function(e) {    alert("Error occurred: " + e);};var scrapeCosponsors = function(document) {  var title = getNode(document, document, '//div[@id="content"]/b[1]/text()[1]', nsResolver).nodeValue;  var uri = 'http://thomas.loc.gov/cgi-bin/bdquery/z?d110:' + cleanString(title).replace(".","","g") + ':';  var xp = '//div[@id="content"]/ul/a';  var cos = utilities.gatherElementsOnXPath(document, document, xp, nsResolver);  for each (var co in cos) {    try {      data.addStatement(uri, sns + 'cosponsor', function(input) {        var fidx = input.indexOf(',');        var lidx = input.lastIndexOf(',');        if (fidx == lidx)          output = input.substring(fidx+2) + " " + input.substring(4, fidx);        else          output = input.substring(fidx+2, lidx) + " " + input.substring(4, fidx) + ", " + input.substring(lidx+2);        return output;}(getNode(document, co, './text()[1]', nsResolver).nodeValue), true);    } catch (e) { log(e); }    }  };var xpath = '//div[@id="content"]/p[position()>1 and position()<last()]';var elements = utilities.gatherElementsOnXPath(document, document, xpath, nsResolver);for each (var element in elements) {  var uri = 'http://thomas.loc.gov/cgi-bin/bdquery/z?d110:' + cleanString(getNode(document, element, './A[1]/text()[1]', nsResolver).nodeValue).replace('.','','g') + ':';    data.addStatement(uri, rdf + 'type', sns + 'Bill', false);  data.addStatement(uri, sns + 'billHomepage', uri, true);    try {    data.addStatement(uri, rdfs + 'label', cleanString(getNode(document, element, './A[1]/text()[1]', nsResolver).nodeValue), true);  } catch (e) { log(e); }    try {    data.addStatement(uri, dc + 'description', cleanString(getNode(document, element, './text()[2]', nsResolver).nodeValue.substring(1)), true);  } catch (e) { log(e); }  try {    data.addStatement(uri, sns + 'sponsor', function(input) {      var fidx = input.indexOf(',');      var lidx = input.lastIndexOf(',');      if (fidx == lidx)        output = input.substring(fidx+2) + " " + input.substring(3, fidx);      else        output = input.substring(fidx+2, lidx) + " " + input.substring(3, fidx) + ", " + input.substring(lidx+2);      return output;}(getNode(document, element, './A[2]/text()[1]', nsResolver).nodeValue.substring(1)), true);  } catch (e) { log(e); }  try {    data.addStatement(uri, sns + 'inCommittee', function(input) {      var idx = input.indexOf('eferred to the ') + 'eferred to the '.length;      output = input.substring(idx, input.length-1);      return output;}(getNode(document, element, './text()[7]', nsResolver).nodeValue.substring(1)), true);  } catch (e) { log(e); }    try {    var cosponsors = getNode(document, element, './A[3]', nsResolver);    if (cosponsors && cosponsors.href) {      piggybank.scrapeURL(cosponsors.href, scrapeCosponsors, failure);    }  } catch (e) { log(e); } }